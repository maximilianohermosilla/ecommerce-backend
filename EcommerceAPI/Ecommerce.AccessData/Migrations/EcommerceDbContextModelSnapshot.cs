// <auto-generated />
using System;
using Ecommerce.AccessData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.AccessData.Migrations
{
    [DbContext(typeof(EcommerceDbContext))]
    partial class EcommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Domain.Entities.Caracteristica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdTipoCaracteristica")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoCaracteristica");

                    b.ToTable("Caracteristica");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Carrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdProductoDetalle")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProductoDetalle");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Carrito");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.CategoriaProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CategoriaProducto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Departamento")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Piso")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Direccion");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.EstadoPedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdPedido");

                    b.ToTable("EstadoPedido");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.FormaEntrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FormaEntrega");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Expiracion")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdTipoFormaPago")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoFormaPago");

                    b.HasIndex("IdUsuario");

                    b.ToTable("FormaPago");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ImagenProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<string>("NombreArchivo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.ToTable("ImagenProducto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Opinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("Puntos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Opinion");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Parametro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parametro");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdDireccion")
                        .HasColumnType("int");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int>("IdFormaEntrega")
                        .HasColumnType("int");

                    b.Property<int>("IdFormaPago")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("numeric(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdDireccion");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdFormaEntrega");

                    b.HasIndex("IdFormaPago");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PedidoDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<float>("Descuento")
                        .HasColumnType("real");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdProductoDetalle")
                        .HasColumnType("int");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<float>("PrecioFinal")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProductoDetalle");

                    b.ToTable("PedidoDetalle");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdCategoriaProducto")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoriaProducto");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductoCaracteristica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCaracteristica")
                        .HasColumnType("int");

                    b.Property<int>("IdProductoDetalle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCaracteristica");

                    b.HasIndex("IdProductoDetalle");

                    b.ToTable("ProductoCaracteristica");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductoDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductoDetalle");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Promocion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cuotas")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Descuento")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promocion");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PromocionCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdCategoriaProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoriaProducto");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdPromocion");

                    b.ToTable("PromocionCategoria");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PromocionProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdPromocion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdPromocion");

                    b.ToTable("PromocionProducto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.TipoCaracteristica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdCategoriaProducto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoriaProducto");

                    b.ToTable("TipoCaracteristica");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.TipoFormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TipoFormaPago");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DNI")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Habilitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelefonoPrincipal")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TelefonoSecundario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdPerfil");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Caracteristica", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.TipoCaracteristica", "TipoCaracteristica")
                        .WithMany("Caracteristicas")
                        .HasForeignKey("IdTipoCaracteristica")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TipoCaracteristica");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Carrito", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductoDetalle", "ProductoDetalle")
                        .WithMany("Carritos")
                        .HasForeignKey("IdProductoDetalle")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Carritos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductoDetalle");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Direccion", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Direcciones")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.EstadoPedido", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Estado", "Estado")
                        .WithMany("EstadoPedidos")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Pedido", "Pedido")
                        .WithMany("EstadoPedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.FormaPago", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.TipoFormaPago", "TipoFormaPago")
                        .WithMany("FormaPagos")
                        .HasForeignKey("IdTipoFormaPago")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Usuario", "Usuario")
                        .WithMany("FormaPagos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TipoFormaPago");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ImagenProducto", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Producto", "Producto")
                        .WithMany("ImagenProductos")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Opinion", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Producto", "Producto")
                        .WithMany("Opiniones")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Opiniones")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Direccion", "Direccion")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdDireccion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Estado", "Estado")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdEstado")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.FormaEntrega", "FormaEntrega")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdFormaEntrega")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.FormaPago", "FormaPago")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdFormaPago")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Direccion");

                    b.Navigation("Estado");

                    b.Navigation("FormaEntrega");

                    b.Navigation("FormaPago");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PedidoDetalle", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Pedido", "Pedido")
                        .WithMany("PedidoDetalles")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.ProductoDetalle", "ProductoDetalle")
                        .WithMany("PedidoDetalles")
                        .HasForeignKey("IdProductoDetalle")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("ProductoDetalle");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Producto", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.CategoriaProducto", "CategoriaProducto")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoriaProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoriaProducto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductoCaracteristica", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Caracteristica", "Caracteristica")
                        .WithMany("ProductoCaracteristicas")
                        .HasForeignKey("IdCaracteristica")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.ProductoDetalle", "ProductoDetalle")
                        .WithMany("ProductoCaracteristicas")
                        .HasForeignKey("IdProductoDetalle")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Caracteristica");

                    b.Navigation("ProductoDetalle");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductoDetalle", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Empresa", "Empresa")
                        .WithMany("ProductoDetalles")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Producto", "Producto")
                        .WithMany("ProductoDetalles")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PromocionCategoria", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.CategoriaProducto", "CategoriaProducto")
                        .WithMany("PromocionCategorias")
                        .HasForeignKey("IdCategoriaProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Empresa", "Empresa")
                        .WithMany("PromocionCategorias")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Promocion", "Promocion")
                        .WithMany("PromocionCategorias")
                        .HasForeignKey("IdPromocion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoriaProducto");

                    b.Navigation("Empresa");

                    b.Navigation("Promocion");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.PromocionProducto", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Producto", "Producto")
                        .WithMany("PromocionProductos")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Promocion", "Promocion")
                        .WithMany("PromocionProductos")
                        .HasForeignKey("IdPromocion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Promocion");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.TipoCaracteristica", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.CategoriaProducto", "CategoriaProducto")
                        .WithMany("TipoCaracteristicas")
                        .HasForeignKey("IdCategoriaProducto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CategoriaProducto");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Perfil", "Perfil")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Caracteristica", b =>
                {
                    b.Navigation("ProductoCaracteristicas");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.CategoriaProducto", b =>
                {
                    b.Navigation("Productos");

                    b.Navigation("PromocionCategorias");

                    b.Navigation("TipoCaracteristicas");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Direccion", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Empresa", b =>
                {
                    b.Navigation("ProductoDetalles");

                    b.Navigation("PromocionCategorias");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Estado", b =>
                {
                    b.Navigation("EstadoPedidos");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.FormaEntrega", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.FormaPago", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Pedido", b =>
                {
                    b.Navigation("EstadoPedidos");

                    b.Navigation("PedidoDetalles");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Perfil", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Producto", b =>
                {
                    b.Navigation("ImagenProductos");

                    b.Navigation("Opiniones");

                    b.Navigation("ProductoDetalles");

                    b.Navigation("PromocionProductos");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductoDetalle", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("PedidoDetalles");

                    b.Navigation("ProductoCaracteristicas");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Promocion", b =>
                {
                    b.Navigation("PromocionCategorias");

                    b.Navigation("PromocionProductos");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.TipoCaracteristica", b =>
                {
                    b.Navigation("Caracteristicas");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.TipoFormaPago", b =>
                {
                    b.Navigation("FormaPagos");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Direcciones");

                    b.Navigation("FormaPagos");

                    b.Navigation("Opiniones");

                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
